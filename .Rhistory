body = toJSON(list(organisationUnits = ous$organisationUnits), auto_unbox = TRUE),content_type_json(),
authenticate(dest.user, dest.pass))
assertthat::assert_that(r2$status_code == 200)
r2
# Post the organisaition units to training instance
r2 <- POST(paste0(dest.url,"api/metadata?importStrategy=CREATE&atomicMode=NONE"),
body = toJSON(ous, auto_unbox = TRUE),content_type_json(),
authenticate(dest.user, dest.pass))
assertthat::assert_that(r2$status_code == 200)
r2
toJSON(ous, auto_unbox = TRUE)
gc()
ous$organisationUnits$user
ous$organisationUnits[-c("created, lastUpdated, user, attributeValues, translations, lastUpdatedBy")]
ous$organisationUnits[[-c("created, lastUpdated, user, attributeValues, translations, lastUpdatedBy")]]
names(ous$organisationUnits)
which(names(ous$organisationUnits) %in% index)
match(names(ous$organisationUnits), c("user","lastUpdated"))
match(names(ous$organisationUnits), c("user","lastUpdated"), is.na=F)
which(names(ous$organisationUnits) %in% c("user","lastUpdated"))
which(names(ous$organisationUnits) %in% c("user","lastUpdated", "created", "attributeValues", "translations", "lastUpdatedBy"))
indexNums <- which(names(ous$organisationUnits) %in% c("user","lastUpdated", "created", "attributeValues", "translations", "lastUpdatedBy"))
ous2 <- ous$organisationUnits[-indexNums]
toJSON(list(organisationUnits = ous2), auto_unbox = TRUE)
r2 <- POST(paste0(dest.url,"api/metadata?importStrategy=CREATE&atomicMode=NONE"),
body = toJSON(list(organisationUnits = ous2), auto_unbox = TRUE),content_type_json(),
authenticate(dest.user, dest.pass))
assertthat::assert_that(r2$status_code == 200)
r2$status_code
r2
content(r2, "text")
r2 <- POST(paste0(dest.url,"api/metadata?importStrategy=CREATE_AND_UPDATE&atomicMode=NONE"),
body = toJSON(list(organisationUnits = ous2), auto_unbox = TRUE),content_type_json(),
authenticate(dest.user, dest.pass))
assertthat::assert_that(r2$status_code == 200)
content(r2, "text")
indexNums <- which(names(ous) %in% c("user","lastUpdated", "created", "attributeValues", "translations", "lastUpdatedBy"))
indexNums
names(ous)
indexNums <- which(names(ous$organisationUnits) %in% c("user","lastUpdated", "created", "attributeValues", "translations", "lastUpdatedBy"))
indexNums
names(ous$organisationUnits[-indexNums])
indexNums <- which(names(ous$organisationUnits) %in% c("user","lastUpdated", "created", "attributeValues", "translations", "lastUpdatedBy", "path"))
indexNums
names(ous$organisationUnits[-indexNums])
ous3 <- ous$organisationUnits[-indexNums]
r2 <- POST(paste0(dest.url,"api/metadata?importStrategy=CREATE_AND_UPDATE&atomicMode=NONE"),
body = toJSON(list(organisationUnits = ous3), auto_unbox = TRUE),content_type_json(),
authenticate(dest.user, dest.pass))
assertthat::assert_that(r2$status_code == 200)
content(r2, "text")
rm(ous3)
rm(ous2)
rm(ous)
gc()
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
r2
content(r2, "text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
r
content(r, "text")
gc()
r
rm(r)
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2, "text")
dataelements$dataElements$aggregationLevels
dataelements$dataElements$categoryCombo
dataelements$dataElements$user
dataelements$dataElements$lastUpdatedBy
indexNums <- which(names(ous$organisationUnits) %in% c("user","lastUpdated", "created", "attributeValues", "translations", "lastUpdatedBy", "path"))
names(dataelements$dataElements)
dataelements$dataElements$zeroIsSignificant
indexNums <- which(names(dataelements$dataElements) %in% c("name","code","shortName","aggregationType","valueType","domainType","categoryCombo"))
dataelements$dataElements[indexNums]
names(dataelements$dataElements[indexNums])
# select only the required fields
indexNums <- which(names(dataelements$dataElements) %in% c("name","code","shortName","aggregationType","valueType","domainType","categoryCombo"))
dataelements2 <- dataelements$dataElements[indexNums]
# post the data elements
r2 <- POST(paste0(dest.url,"api/metadata?importStrategy=CREATE&atomicMode=NONE"),
body = toJSON(list(dataElements = dataelements2), auto_unbox = TRUE),content_type_json())
assertthat::assert_that(r2$status_code == 200)
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
head(dataelements2)
names(dataelements2)
names(dataelements$dataElements)
dataelements2$categoryCombo
# select only the required fields
indexNums <- which(names(dataelements$dataElements) %in% c("name","id", "code","shortName","aggregationType","valueType","domainType","categoryCombo"))
dataelements2 <- dataelements$dataElements[indexNums]
dataelements2$id
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
names(dataelements$dataElements)
dataelements$dataElements$formName
names(dataelements$dataElements)
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
# Extract data elements groups
r <- GET(source.url,"api/metadata.json?assumeTRUE=TRUE&dataElementGroups=TRUE")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
r2
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
names(ds$dataSets)
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
rm(ds)
names(ind$indicators)
indexNums <- which(names(ind$indicators) %in% c("userGroupAccess", "user", "attributeValues","lastUpdatedBy","publicAccess","translations","userAccesses"))
length(indexNums)
names(ind$indicators[indexNums])
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
names(ind2$indicatorType)
ind2$indicatorType
ind2$indicatorType[is.na(ind2$indicatorType)]
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
names(indType)
indType <- fromJSON(content(r,"text"))
names(indType)
names(indType$indicatorTypes)
names(indType$indicators)
names(indType$indicatorTypes)
names(indType$indicatorTypes$translations)
head(indType$indicatorTypes)
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
names(indGroups$indicatorGroups)
indGroups <- fromJSON(content(r,"text"))
indexNums <- which(names(indGroups$indicatorGroups) %in% c("userGroupAccesses", "user", "attributeValues","lastUpdatedBy","publicAccess","translations","userAccesses","lastUpdated"))
indGroups2 <- indGroups$indicatorGroups[-indexNums]
names(indGroups2)
names(indGroups2$indicatorGroupSet)
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
names(ds$dataSets)
names(ds2$dataSets)
names(ds2$dataEntryForm)
names(ds2$workflow)
names(ds2$categoryCombo)
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
ds
names(ds)
names(ds$categoryCombos)
names(ds$categoryCombos$publicAccess)
ds$categoryCombos$publicAccess
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
# GET data data elements
r <- GET(paste0(source.url,"api/metadata.json?assumeTrue=FALSE&dataElements=TRUE"),
authenticate(source.user, source.pass))
dataelements <- fromJSON(content(r,"text"))
names(dataelements$dataElements)
names(dataelements$dataElements$optionSet)
names(dataelements$dataElements$aggregationLevels)
dataelements$dataElements$aggregationLevels
dataelements$dataElements$categoryCombo
dataelements$dataElements$optionSet
names(dataelements$dataElements)
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2, "text")
dataelements$dataElements$categoryCombo
names(dataelements2)
names(dataelements2$categoryCombo)
dataelements2$categoryCombo[!is.na(dataelements2$categoryCombo)]
dataelements2$categoryCombo[is.na(dataelements2$categoryCombo)]
content(r2,"text")
head(dataelements2)
head(dataelements2$categoryCombo)
toJSON(head(dataelements2), auto_unbox = TRUE)
getwd()
write.table(dataelements2, file="dataElements.csv",row.names = F,na = "")
class(dataelements2)
library(dplyr)
names(select(dataelements2, -dataelements2$categoryCombo))
names(select(dataelements2, -categoryCombo))
de <- select(dataelements2, -categoryCombo)
write.table(de,"de.csv",row.names = F,na="")
de <- select(dataelements2, -legendSets)
names(de)
write.table(de,"de.csv",row.names = F,na="")
head(de)
head(de$categoryCombo)
head(de$id)
de <- select(dataelements2, -legendSets, -categoryCombo)
names(de)
cc <- dataelements2$categoryCombo
names(cc)
class(cc)
cc <- dataelements2$categoryCombo$id
class(cc)
de$categorycombouid <- cc
head(de)
content(r2,"text")
names(de$categorycombouid)
names(de$categorycombouid)
names(de)
write.table(de, "de.csv", quote = F, row.names = F, na = "")
write.table(de, "de.csv", quote = F, row.names = F, sep = ",", col.names = T, quote = T)
write.table(de, "de.csv", quote = F, row.names = F, sep = ",", col.names = T, quote=T)
write.table(de, "de.csv", quote = T, row.names = F, sep = ",", col.names = T)
write.table(de, "de.csv", quote = T, row.names = F, sep = ",", col.names = T,na="")
write.table(de, "de.csv", quote = T, row.names = F, sep = ",", col.names = T,na="")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
names(def$dataEntryForms)
head(def$dataEntryForms$translations)
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
source('~/GIZ Work/Bootstrapping Dhis2/API.R')
content(r2,"text")
indexNums <- which(names(ds$dataSets) %in% c("userGroupAccesses", "user", "attributeValues","lastUpdatedBy","publicAccess","translations","userAccesses","lastUpdated","categoryCombo"))
ds2 <- ds$dataSets[-indexNums]
# post the dataEntryForms
r2 <- POST(paste0(dest.url,"api/metadata?importStrategy=CREATE_AND_UPDATE&atomicMode=NONE"),
body = toJSON(list(dataSets = ds2), auto_unbox = TRUE),
content_type_json())
assertthat::assert_that(r2$status_code==200)
content(r2,"text")
names(ds2)
ds2$dataSetElements
content(r2,"text")
ds$dataSets$dataInputPeriods
ds$dataSets$organisationUnits
names(ds2)
indexNums <- which(names(ds$dataSets) %in% c("userGroupAccesses", "user", "attributeValues","lastUpdatedBy","publicAccess","translations","userAccesses","lastUpdated","categoryCombo","dataSetElements"))
ds2 <- ds$dataSets[-indexNums]
# post the dataEntryForms
r2 <- POST(paste0(dest.url,"api/metadata?importStrategy=CREATE_AND_UPDATE&atomicMode=NONE"),
body = toJSON(list(dataSets = ds2), auto_unbox = TRUE),
content_type_json())
assertthat::assert_that(r2$status_code==200)
content(r2,"text")
install.packages("RJSONIO")
library(RJSONIO)
indexNums <- which(names(ds$dataSets) %in% c("userGroupAccesses", "user", "attributeValues","lastUpdatedBy","publicAccess","translations","userAccesses","lastUpdated","categoryCombo"))
ds2 <- ds$dataSets[-indexNums]
RJSONIO::write(toJSON(list(dataSets=ds2), auto_unbox = TRUE), "datasets.json")
source('~/GIZ Work/dhis2 data wrangling/metadata/API Client.R')
getwd()
library(rlist)
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
#Login to dhis2 training
loginDhis2(dest.url,dest.user, dest.pass)
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
obj
obj <- getMetadata(base.url = dest.url,
datatype = targets[i],
property.url = property.url,
usr = dest.user,pwd = dest.pass)
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
url
url2
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
print(obj)
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
r
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
length(targets_df)
rm(targets_df)
head(dataElements)
seq_along(nrow(dataElements))
seq_along(1:nrow(dataElements))
# build the url
urlA <- paste0(dest.url,"/api/analytics.json?")
urlA
urlD <- paste0("dimension=ou:", paste0("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";"))
urlD
urlD <- paste0("dimension=ou:", paste0("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", collapse = ";"))
urlD
urlD <- paste0("dimension=ou:", paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", collapse = ";"))
urlD
paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", collapse = ";")
paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";")
paste0("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";")
paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";")
urlD <- paste0("dimension=ou:", paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";"))
urlD
# build the url
urlA <- paste0(dest.url,"api/analytics.json?")
urlB <- paste0("dimension=dx:", dataElements$id[i])
urlC <- paste0("dimension=pe:", "LAST_12_MONTHS")
urlD <- paste0("dimension=ou:", paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";"))
urlE <- "displayProperty=NAME&skipMeta=false"
url <- paste(paste0(urlA, urlB),
urlC, urlD, urlE,
sep="&")
r <- GET(url, authenticate(source.user, source.pass))
r
content(r,"text")
for (i in seq_along(1:nrow(dataElements))){
# build the url
urlA <- paste0(dest.url,"api/analytics.json?")
urlB <- paste0("dimension=dx:", dataElements$id[i])
urlC <- paste0("dimension=pe:", "LAST_12_MONTHS")
urlD <- paste0("dimension=ou:", paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";"))
urlE <- "displayProperty=NAME&skipMeta=false"
url <- paste(paste0(urlA, urlB),
urlC, urlD, urlE,
sep="&")
r <- GET(url, authenticate(source.user, source.pass))
}
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
content(r,"text")
#Extract data values from the national instance that matches.
# dataElements
pb <- winProgressBar(title = "Kenya - dhis2 acedemy data exchange (pull & push)",
label = "0% done",
min = 0,
max = nrow(dataElements))
for (i in seq_along(1:nrow(dataElements))){
# build the url
urlA <- paste0(dest.url,"api/analytics.json?")
urlB <- paste0("dimension=dx:", dataElements$id[i])
urlC <- paste0("dimension=pe:", "LAST_12_MONTHS")
urlD <- paste0("dimension=ou:", paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";"))
urlE <- "displayProperty=NAME&skipMeta=false"
url <- paste(paste0(urlA, urlB),
urlC, urlD, urlE,
sep="&")
r <- GET(url, authenticate(source.user, source.pass))
r <- content(r,"text")
# convert the json into an R data structure
d <- fromJSON(r, flatten = TRUE)
# get the metadata map
data <- as.data.frame(d$rows, stringAsFactors = TRUE)
names(data) <- d$headers$column
# prepare data for import
# Remove nulls to make things faster
data2 <- data[sapply(data, function(x)!any(is.na(x)))]
# chnage the names
names(data2) <- c("dataElement","period","orgUnit","value")
# prepare url and post
urlPost <- paste0(dest.url,"api/dataValueSets?preheatCache=TRUE&skipExistingCheck=TRUE")
rp <- POST(urlPost, body = toJSON(list(dataValues = data2), auto_unbox = TRUE), content_type_json())
info <- sprintf("%d%% done", round(i/nrow(dataElements)*100))
setWinProgressBar(pb, i, label = info)
}
close(pb)
# dataElements
pb <- winProgressBar(title = "Kenya - dhis2 acedemy data exchange (pull & push)",
label = "0% done",
min = 0,
max = nrow(dataElements))
for (i in seq_along(1:nrow(dataElements))){
# build the url
urlA <- paste0(dest.url,"api/analytics.json?")
urlB <- paste0("dimension=dx:", dataElements$id[i])
urlC <- paste0("dimension=pe:", "LAST_12_MONTHS")
urlD <- paste0("dimension=ou:", paste("LEVEL-1","LEVEL-2","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";"))
urlE <- "displayProperty=NAME&skipMeta=false"
url <- paste(paste0(urlA, urlB),
urlC, urlD, urlE,
sep="&")
r <- GET(url, authenticate(source.user, source.pass))
r <- content(r,"text")
# convert the json into an R data structure
d <- fromJSON(r, flatten = TRUE)
# get the metadata map
data <- as.data.frame(d$rows, stringAsFactors = TRUE)
names(data) <- d$headers$column
# prepare data for import
# Remove nulls to make things faster
data2 <- data[sapply(data, function(x)!any(is.na(x)))]
# chnage the names
names(data2) <- c("dataElement","period","orgUnit","value")
# prepare url and post
urlPost <- paste0(dest.url,"api/dataValueSets?preheatCache=TRUE&skipExistingCheck=TRUE")
rp <- POST(urlPost, body = toJSON(list(dataValues = data2), auto_unbox = TRUE), content_type_json())
info <- sprintf("%d%% done", round(i/nrow(dataElements)*100))
setWinProgressBar(pb, i, label = info)
}
url
r
content(r,"text")
r <- GET(url, authenticate(source.user, source.pass))
content(r,"text")
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
content(r,"text")
r
d$rows
d$headers$column
url
head(dataElements)
data
length(data)
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
content(r,"text")
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
content(rp,"text")
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
content(rp,"text")
source('~/GIZ Work/Bootstrapping Dhis2/Analytics.R')
#login
loginDhis2(dest.url, dest.user, dest.pass)
# trigger analytics
url <- paste0(dest.url,"api/resourceTables/analytics")
r <- POST(url)
content(r,"text")
urlD <- paste0("dimension=ou:", paste("tAbBVBbueqD","LEVEL-3","LEVEL-4","LEVEL-5","LEVEL-6","LEVEL-7","LEVEL-8", sep = ";"))
urlD
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
content(rp, "text")
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/Analytics.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
content(rp,"text")
content(rp,"text")
r
source('~/GIZ Work/Bootstrapping Dhis2/Analytics.R')
content(r,"text")
d$httpStatus
d$httpStatusCode
d$message
dplyr::select(dataElements, id == "Zv3Et6wVj03")
dplyr::select(dataElements, id %in% "Zv3Et6wVj03")
url
url <- paste(paste0(urlA, urlB),
urlC, urlD, urlE,
sep="&")
url
dplyr::select(dataElements, id %in% ":MOH 731  Te")
dplyr::select(dataElements, id == ":MOH 731  Te")
source('~/GIZ Work/Bootstrapping Dhis2/Analytics.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
?lapply
?character.only
??character.only
source('~/GIZ Work/Bootstrapping Dhis2/user.r')
source('~/GIZ Work/Bootstrapping Dhis2/user.r')
?list.files
getwd()
list.files()
files <- list.files()
files
data <- lapply(files, read.csv)
data
list.files()
setwd("..")
getwd()
list.files()
setwd("./dhis2 data wrangling")
list.files()
setwd("./metadata")
list.files()
files <- list.files()
d <- lapply(files, read.csv)
setwd("..")
list.files()
setwd("./Data")
list.files()
files <- list.files()
d <- lapply(files, read.csv)
d
class(d)
d[[1]]
d[[2]]
d[[3]]
d <- do.call(rbind, d)
d
names(d)
names(d) <- c("One","two","three")
d
d$One
d$two
data.table::rbindlist(d)
d <- data.table::rbindlist(d)
d
names(d)
dim(d)
d$Data
d$Period
d$Value
source('~/GIZ Work/Bootstrapping Dhis2/dataExchange.R')
startTime
endTime
timeDifference
source('~/GIZ Work/Bootstrapping Dhis2/Analytics.R')
r
content(r,"text")
source('~/GIZ Work/Bootstrapping Dhis2/Analytics.R')
source('~/GIZ Work/Bootstrapping Dhis2/Analytics.R')
